
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import AppLanguage from '@/models/AppLanguage';
import User from '@/models/User';
import fs from 'fs/promises';
import path from 'path';
import NotificationService from '@/services/notification.service';

async function writeI18nConfig(locales: string[], defaultLocale: string) {
  const configContent = `// src/i18n-config.ts
// THIS FILE IS AUTO-GENERATED BY THE LANGUAGES MANAGER API.
// DO NOT EDIT MANUALLY.
// A SERVER RESTART IS REQUIRED FOR CHANGES TO TAKE EFFECT.

export const locales = ${JSON.stringify(locales)};
export const defaultLocale = '${defaultLocale}';
`;
  const configPath = path.join(process.cwd(), 'src', 'i18n-config.ts');
  await fs.writeFile(configPath, configContent.trim() + '\n', 'utf-8');
  console.log('[API/languages/apply-configuration] Successfully updated src/i18n-config.ts');
}

async function getActorDetails(request: Request) {
  const userEmail = request.headers.get('X-User-Email');
  if (userEmail) {
    const actingUser = await User.findOne({ email: userEmail }).lean();
    if (actingUser) {
      return {
        actorId: actingUser._id.toString(),
        actorName: actingUser.name,
        actorImageUrl: actingUser.imageUrl,
      };
    }
  }
  return {};
}

export async function POST(request: Request) {
  await dbConnect();
  try {
    const enabledLanguages = await AppLanguage.find({ isEnabled: true }).sort({ code: 1 });
    if (enabledLanguages.length === 0) {
      return NextResponse.json({ success: false, error: 'No enabled languages found. Cannot apply configuration.' }, { status: 400 });
    }

    const defaultLanguage = enabledLanguages.find(lang => lang.isDefault);
    if (!defaultLanguage) {
      return NextResponse.json({ success: false, error: 'No default language set among enabled languages. Cannot apply configuration.' }, { status: 400 });
    }

    const locales = enabledLanguages.map(lang => lang.code);
    const defaultLocale = defaultLanguage.code;

    await writeI18nConfig(locales, defaultLocale);
    const actorDetails = await getActorDetails(request);
    await NotificationService.createNotification({
      messageKey: 'Notifications.languageConfigApplied',
      type: 'success',
      link: '/languages',
      ...actorDetails
    });
    
    return NextResponse.json({ 
      success: true, 
      message: 'Successfully updated i18n-config.ts. Please restart your server for changes to take effect.',
      data: { locales, defaultLocale }
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error applying language configuration.';
    console.error("[API/languages/apply-configuration] Error:", error);
    const actorDetails = await getActorDetails(request);
    await NotificationService.createNotification({
        messageKey: 'Notifications.languageConfigApplyFailed',
        messageParams: { error: errorMessage },
        type: 'error',
        ...actorDetails
    });
    return NextResponse.json({ success: false, error: errorMessage }, { status: 500 });
  }
}
